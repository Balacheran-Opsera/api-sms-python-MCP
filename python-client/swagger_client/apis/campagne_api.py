# coding: utf-8

"""
    API iSendPro

    [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 

    OpenAPI spec version: 1.0.0
    Contact: support@isendpro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CampagneApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_campagne(self, keyid, rapport_campagne, date_deb, date_fin, **kwargs):
        """
        Retourne les SMS envoyés sur une période donnée
        Retourne les SMS envoyés sur une période donnée en fonction d'une date de début et d'une date de fin.   Les dates sont au format YYYY-MM-DD hh:mm.   Le fichier rapport de campagne est sous la forme d'un fichier zip + contenant un fichier csv contenant le détail des envois. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campagne(keyid, rapport_campagne, date_deb, date_fin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str keyid: Clé API (required)
        :param str rapport_campagne: Doit valoir \"1\" (required)
        :param str date_deb: date de debut au format YYYY-MM-DD hh:mm (required)
        :param str date_fin: date de fin au format YYYY-MM-DD hh:mm (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_campagne_with_http_info(keyid, rapport_campagne, date_deb, date_fin, **kwargs)
        else:
            (data) = self.get_campagne_with_http_info(keyid, rapport_campagne, date_deb, date_fin, **kwargs)
            return data

    def get_campagne_with_http_info(self, keyid, rapport_campagne, date_deb, date_fin, **kwargs):
        """
        Retourne les SMS envoyés sur une période donnée
        Retourne les SMS envoyés sur une période donnée en fonction d'une date de début et d'une date de fin.   Les dates sont au format YYYY-MM-DD hh:mm.   Le fichier rapport de campagne est sous la forme d'un fichier zip + contenant un fichier csv contenant le détail des envois. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_campagne_with_http_info(keyid, rapport_campagne, date_deb, date_fin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str keyid: Clé API (required)
        :param str rapport_campagne: Doit valoir \"1\" (required)
        :param str date_deb: date de debut au format YYYY-MM-DD hh:mm (required)
        :param str date_fin: date de fin au format YYYY-MM-DD hh:mm (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['keyid', 'rapport_campagne', 'date_deb', 'date_fin']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_campagne" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'keyid' is set
        if ('keyid' not in params) or (params['keyid'] is None):
            raise ValueError("Missing the required parameter `keyid` when calling `get_campagne`")
        # verify the required parameter 'rapport_campagne' is set
        if ('rapport_campagne' not in params) or (params['rapport_campagne'] is None):
            raise ValueError("Missing the required parameter `rapport_campagne` when calling `get_campagne`")
        # verify the required parameter 'date_deb' is set
        if ('date_deb' not in params) or (params['date_deb'] is None):
            raise ValueError("Missing the required parameter `date_deb` when calling `get_campagne`")
        # verify the required parameter 'date_fin' is set
        if ('date_fin' not in params) or (params['date_fin'] is None):
            raise ValueError("Missing the required parameter `date_fin` when calling `get_campagne`")

        resource_path = '/campagne'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'keyid' in params:
            query_params['keyid'] = params['keyid']
        if 'rapport_campagne' in params:
            query_params['rapportCampagne'] = params['rapport_campagne']
        if 'date_deb' in params:
            query_params['date_deb'] = params['date_deb']
        if 'date_fin' in params:
            query_params['date_fin'] = params['date_fin']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'file'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='file',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
