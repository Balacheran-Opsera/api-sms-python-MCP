# coding: utf-8

"""
    API iSendPro

    [1] Liste des fonctionnalités : - envoi de SMS à un ou plusieurs destinataires, - lookup HLR, - récupération des récapitulatifs de campagne, - gestion des répertoires, - ajout en liste noire. - comptage du nombre de caractères des SMS  [2] Pour utiliser cette API vous devez: - Créer un compte iSendPro sur https://isendpro.com/ - Créditer votre compte      - Remarque: obtention d'un crédit de test possible sous conditions - Noter votre clé de compte (keyid)   - Elle vous sera indispensable à l'utilisation de l'API   - Vous pouvez la trouver dans le rubrique mon \"compte\", sous-rubrique \"mon API\" - Configurer le contrôle IP   - Le contrôle IP est configurable dans le rubrique mon \"compte\", sous-rubrique \"mon API\"   - Il s'agit d'un système de liste blanche, vous devez entrer les IP utilisées pour appeler l'API   - Vous pouvez également désactiver totalement le contrôle IP 

    OpenAPI spec version: 1.0.0
    Contact: support@isendpro.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ComptageRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, keyid=None, comptage='1', date_envoi=None, sms=None, num=None, emetteur=None, tracker=None, smslong='999', nostop=None, ucs2=None):
        """
        ComptageRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'keyid': 'str',
            'comptage': 'str',
            'date_envoi': 'str',
            'sms': 'str',
            'num': 'str',
            'emetteur': 'str',
            'tracker': 'str',
            'smslong': 'str',
            'nostop': 'str',
            'ucs2': 'str'
        }

        self.attribute_map = {
            'keyid': 'keyid',
            'comptage': 'comptage',
            'date_envoi': 'date_envoi',
            'sms': 'sms',
            'num': 'num',
            'emetteur': 'emetteur',
            'tracker': 'tracker',
            'smslong': 'smslong',
            'nostop': 'nostop',
            'ucs2': 'ucs2'
        }

        self._keyid = keyid
        self._comptage = comptage
        self._date_envoi = date_envoi
        self._sms = sms
        self._num = num
        self._emetteur = emetteur
        self._tracker = tracker
        self._smslong = smslong
        self._nostop = nostop
        self._ucs2 = ucs2

    @property
    def keyid(self):
        """
        Gets the keyid of this ComptageRequest.
        Clé API

        :return: The keyid of this ComptageRequest.
        :rtype: str
        """
        return self._keyid

    @keyid.setter
    def keyid(self, keyid):
        """
        Sets the keyid of this ComptageRequest.
        Clé API

        :param keyid: The keyid of this ComptageRequest.
        :type: str
        """

        self._keyid = keyid

    @property
    def comptage(self):
        """
        Gets the comptage of this ComptageRequest.


        :return: The comptage of this ComptageRequest.
        :rtype: str
        """
        return self._comptage

    @comptage.setter
    def comptage(self, comptage):
        """
        Sets the comptage of this ComptageRequest.


        :param comptage: The comptage of this ComptageRequest.
        :type: str
        """
        allowed_values = ["1"]
        if comptage not in allowed_values:
            raise ValueError(
                "Invalid value for `comptage` ({0}), must be one of {1}"
                .format(comptage, allowed_values)
            )

        self._comptage = comptage

    @property
    def date_envoi(self):
        """
        Gets the date_envoi of this ComptageRequest.
        Date d'envoi au format YYYY-MM-DD hh:mm . Ce paramètre est optionnel, si il est omis l'envoi est réalisé immédiatement.

        :return: The date_envoi of this ComptageRequest.
        :rtype: str
        """
        return self._date_envoi

    @date_envoi.setter
    def date_envoi(self, date_envoi):
        """
        Sets the date_envoi of this ComptageRequest.
        Date d'envoi au format YYYY-MM-DD hh:mm . Ce paramètre est optionnel, si il est omis l'envoi est réalisé immédiatement.

        :param date_envoi: The date_envoi of this ComptageRequest.
        :type: str
        """

        self._date_envoi = date_envoi

    @property
    def sms(self):
        """
        Gets the sms of this ComptageRequest.
        Message à envoyer aux destinataires. Le message doit être encodé au format utf-8 et ne contenir que des caractères existant dans l'alphabet GSM. Il est également possible d'envoyer (à l'étranger uniquement) des SMS en UCS-2, cf paramètre ucs2 pour plus de détails.

        :return: The sms of this ComptageRequest.
        :rtype: str
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """
        Sets the sms of this ComptageRequest.
        Message à envoyer aux destinataires. Le message doit être encodé au format utf-8 et ne contenir que des caractères existant dans l'alphabet GSM. Il est également possible d'envoyer (à l'étranger uniquement) des SMS en UCS-2, cf paramètre ucs2 pour plus de détails.

        :param sms: The sms of this ComptageRequest.
        :type: str
        """

        self._sms = sms

    @property
    def num(self):
        """
        Gets the num of this ComptageRequest.
        Numero de téléphone au format national (exemple 0680010203) ou international (example 33680010203)

        :return: The num of this ComptageRequest.
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num):
        """
        Sets the num of this ComptageRequest.
        Numero de téléphone au format national (exemple 0680010203) ou international (example 33680010203)

        :param num: The num of this ComptageRequest.
        :type: str
        """

        self._num = num

    @property
    def emetteur(self):
        """
        Gets the emetteur of this ComptageRequest.
        - L'emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères.  - Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace.  - Il ne peut pas comporter uniquement des chiffres.   - Pour la modification de l'émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d'ajouter en fin de message le texte \"STOP XXXXX\". De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement. 

        :return: The emetteur of this ComptageRequest.
        :rtype: str
        """
        return self._emetteur

    @emetteur.setter
    def emetteur(self, emetteur):
        """
        Sets the emetteur of this ComptageRequest.
        - L'emetteur doit être une chaîne alphanumérique comprise entre 4 et 11 caractères.  - Les caractères acceptés sont les chiffres entre 0 et 9, les lettres entre A et Z et l’espace.  - Il ne peut pas comporter uniquement des chiffres.   - Pour la modification de l'émetteur et dans le cadre de campagnes commerciales, les opérateurs imposent contractuellement d'ajouter en fin de message le texte \"STOP XXXXX\". De ce fait, le message envoyé ne pourra excéder une longueur de 148 caractères au lieu des 160 caractères, le « STOP » étant rajouté automatiquement. 

        :param emetteur: The emetteur of this ComptageRequest.
        :type: str
        """

        self._emetteur = emetteur

    @property
    def tracker(self):
        """
        Gets the tracker of this ComptageRequest.
        Le tracker doit être une chaine alphanumérique de moins de 50 caractères. Ce tracker sera ensuite renvoyé en paramètre des urls pour les retours des accusés de réception. 

        :return: The tracker of this ComptageRequest.
        :rtype: str
        """
        return self._tracker

    @tracker.setter
    def tracker(self, tracker):
        """
        Sets the tracker of this ComptageRequest.
        Le tracker doit être une chaine alphanumérique de moins de 50 caractères. Ce tracker sera ensuite renvoyé en paramètre des urls pour les retours des accusés de réception. 

        :param tracker: The tracker of this ComptageRequest.
        :type: str
        """

        self._tracker = tracker

    @property
    def smslong(self):
        """
        Gets the smslong of this ComptageRequest.
        Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué de plusieurs SMS. Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918 caractères par message. Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères. En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères du « STOP SMS ». Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong = \"999\" 

        :return: The smslong of this ComptageRequest.
        :rtype: str
        """
        return self._smslong

    @smslong.setter
    def smslong(self, smslong):
        """
        Sets the smslong of this ComptageRequest.
        Le SMS long permet de dépasser la limite de 160 caractères en envoyant un message constitué de plusieurs SMS. Il est possible d’envoyer jusqu’à 6 SMS concaténés pour une longueur totale maximale de 918 caractères par message. Pour des raisons technique, la limite par SMS concaténé étant de 153 caractères. En cas de modification de l’émetteur, il faut considérer l’ajout automatique de 12 caractères du « STOP SMS ». Pour envoyer un smslong, il faut ajouter le paramètre smslong aux appels. La valeur de SMS doit être le nombre maximum de sms concaténé autorisé.   Pour ne pas avoir ce message d’erreur et obtenir un calcul dynamique du nombre de SMS alors il faut renseigner smslong = \"999\" 

        :param smslong: The smslong of this ComptageRequest.
        :type: str
        """
        allowed_values = ["999"]
        if smslong not in allowed_values:
            raise ValueError(
                "Invalid value for `smslong` ({0}), must be one of {1}"
                .format(smslong, allowed_values)
            )

        self._smslong = smslong

    @property
    def nostop(self):
        """
        Gets the nostop of this ComptageRequest.
        Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop = \"1\"

        :return: The nostop of this ComptageRequest.
        :rtype: str
        """
        return self._nostop

    @nostop.setter
    def nostop(self, nostop):
        """
        Sets the nostop of this ComptageRequest.
        Si le message n’est pas à but commercial, vous pouvez faire une demande pour retirer l’obligation du STOP. Une fois votre demande validée par nos services, vous pourrez supprimer la mention STOP SMS en ajoutant nostop = \"1\"

        :param nostop: The nostop of this ComptageRequest.
        :type: str
        """

        self._nostop = nostop

    @property
    def ucs2(self):
        """
        Gets the ucs2 of this ComptageRequest.
        Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur les numéros hors France métropolitaine. Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 = \"1\" Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères. 

        :return: The ucs2 of this ComptageRequest.
        :rtype: str
        """
        return self._ucs2

    @ucs2.setter
    def ucs2(self, ucs2):
        """
        Sets the ucs2 of this ComptageRequest.
        Il est également possible d’envoyer des SMS en alphabet non latin (russe, chinois, arabe, etc) sur les numéros hors France métropolitaine. Pour ce faire, la requête devrait être encodée au format UTF-8 et contenir l’argument ucs2 = \"1\" Du fait de contraintes techniques, 1 SMS unique ne pourra pas dépasser 70 caractères (au lieu des 160 usuels) et dans le cas de SMS long, chaque sms ne pourra dépasser 67 caractères. 

        :param ucs2: The ucs2 of this ComptageRequest.
        :type: str
        """

        self._ucs2 = ucs2

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
